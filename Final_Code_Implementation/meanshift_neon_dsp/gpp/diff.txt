 */							      |	*/
#include "arm_neon.h"					      <
#include "pool_notify.h"				      <
							      >	#include "arm_neon.h"
							      >	#include <iostream>
							      |	    splitCount = 0;
    count = 1;						      |	    pdfCount = 0;
							      |	    weightCount = 0;
#ifdef TIMING						      |	    loopCount = 0;
    splitCount      = 0;				      <
    pdfCount        = 0;				      <
    weightCount     = 0;				      <
    loopCount       = 0;				      <
    accCount        = 0;				      |	    sqrtCount = 0;
    sqrtCount       = 0;				      <
#endif							      <
void  MeanShift::Init_target_frame(const cv::Mat &frame, cons |	void  MeanShift::Init_target_frame(const cv::Mat &frame,const
    target_model = pdf_representation(frame, target_Region);  |	    target_model = pdf_representation(frame,target_Region);
							      >	    float l=h/2;
							      >	    float m=w/2;
							      |	    for(int i=0;i<h;i++)
    for(int i=0; i<h; i++)				      <
            float x = static_cast<float>(i - h/2);	      |	            float x = static_cast<float>(i - l);
            float y = static_cast<float>(j - w/2);	      |	            float  y = static_cast<float> (j - m);
            float norm_x = x*x/(h*h/4) + y*y/(h*h/4);	      |	            // float norm_x = x*x/(h*h/4)+y*y/(w*w/4);
            // float norm_x = x*x+y*y;			      |	            float norm_x = x*x+y*y;
            float result = norm_x < 1 ? (epanechnikov_cd * (1 |	            float result =norm_x<1?(epanechnikov_cd*(1.0-norm
							      <
// cv::Mat MeanShift::pdf_representation(const cv::Mat &frame <
// {							      <
//     cv::Mat kernel(rect.height,rect.width,CV_32F,cv::Scala <
//     float normalized_C = 1.0 / Epanechnikov_kernel(kernel) <
// 							      <
//     cv::Mat pdf_model(8,16,CV_32F,cv::Scalar(1e-10));      <
// 							      <
//     cv::Vec3b curr_pixel_value;			      <
//     cv::Vec3b bin_value;				      <
// 							      <
//     int row_index = rect.y;				      <
//     int clo_index = rect.x;				      <
// 							      <
//     for(int i=0;i<rect.height;i++)			      <
//     {						      <
//         clo_index = rect.x;				      <
//         for(int j=0;j<rect.width;j++)		      <
//         {						      <
//             curr_pixel_value = frame.at<cv::Vec3b>(row_ind <
//             bin_value[0] = (curr_pixel_value[0] >> 4); //b <
//             bin_value[1] = (curr_pixel_value[1] >> 4); //b <
//             bin_value[2] = (curr_pixel_value[2] >> 4); //b <
// 							      <
//             // COLLAPSE 3 MULTIPLICATIONS INTO A SINGLE ON <
//             pdf_model.at<float>(0,bin_value[0]) += kernel. <
//             pdf_model.at<float>(1,bin_value[1]) += kernel. <
//             pdf_model.at<float>(2,bin_value[2]) += kernel. <
//             // ******************************************* <
// 							      <
//             clo_index++;				      <
//         }						      <
//         row_index++;					      <
//     }						      <
// 							      <
//     return pdf_model;				      <
// 							      <
// }							      <
							      >	    cv::Mat kernel(rect.height,rect.width,CV_32F,cv::Scalar(0
							      >	    float normalized_C = 1.0 / Epanechnikov_kernel(kernel);
							      >
    curr_pixel_value = frame.at<cv::Vec3b>(rect.y + rect.heig |	    int row_index = rect.y;
    bin_value[0] = (curr_pixel_value[0] >> 4); //bin_width);  |	    int clo_index = rect.x;
    bin_value[1] = (curr_pixel_value[1] >> 4); //bin_width);  |	    //float32x2_t a={86.223,90.99};
    bin_value[2] = (curr_pixel_value[2] >> 4); //bin_width);  |	    //uint32x2_t fall= vcvt_n_u32_f32(a,8);
							      |	    //int gamma = vget_lane_u32(fall,0);
    pdf_model.at<float>(0,bin_value[0]) += 1;		      |	    //int kappa = vget_lane_u32(fall,1);
    pdf_model.at<float>(1,bin_value[1]) += 1;		      |	    //int theta=(gamma<<8)/kappa;
    pdf_model.at<float>(2,bin_value[2]) += 1;		      |	      //std::cout << "a0 and a1 and result       " <<gamma<<"
							      >
							      >	    for(int i=0;i<rect.height;i++)
							      >	    {
							      >	        clo_index = rect.x;
							      >	        for(int j=0;j<rect.width;j++)
							      >	        {
							      >	            curr_pixel_value = frame.at<cv::Vec3b>(row_index,
							      >	            bin_value[0] = (curr_pixel_value[0]>>4);
							      >	            bin_value[1] = (curr_pixel_value[1]>>4);
							      >	            bin_value[2] = (curr_pixel_value[2]>>4);
							      >
							      >
							      >	            // COLLAPSE 3 MULTIPLICATIONS INTO A SINGLE ONE
							      >	            float32x4_t pdf1 ={pdf_model.at<float>(0,bin_valu
							      >	            float32x4_t kernel1=vdupq_n_f32((kernel.at<float>
							      >	            uint32x4_t pdf_final= vcvtq_n_u32_f32(pdf1,8);
							      >	            uint32x4_t kernel_final= vcvt_n_u32_f32(kernel1,8
							      >	            pdf_model.at<float>(0,bin_value[0]) += kernel.at<
							      >	            pdf_model.at<float>(1,bin_value[1]) += kernel.at<
							      >	            pdf_model.at<float>(2,bin_value[2]) += kernel.at<
							      >	            // **********************************************
							      >
							      >	            clo_index++;
							      >	        }
							      >	        row_index++;
							      >	    }
							      >
cv::Mat MeanShift::CalWeight(const cv::Mat &window, cv::Mat & |	cv::Mat MeanShift::CalWeight(const cv::Mat &window, cv::Mat &
							      >	    int row_index = 0;
							      >	    int col_index = 0;
							      >	    int64_t ticksStart, ticksEnd;
#ifdef TIMING						      <
    int64_t ticksStart, ticksEnd;			      <
#endif							      <
							      <
							      <
#ifdef TIMING						      <
    // std::cout << "split: " << (ticksEnd - ticksStart) << " |	    //std::cout << "split: " << (ticksEnd - ticksStart) << ",
							      >	     //int32x4_t bin_width1=vdupq_n_f32(vshrq_n_);
							      >	     //float32x4_t bin_width2=vdupq_n_f32(14.858);
							      >	     //int32x4_t ishu= vcvtq_s32_f32(bin_width2);
							      >	     //int hell=vgetq_lane_s32(ishu,0);
							      >	     //std::cout<<hell<<"\n";
#endif							      |
        for(int i=0; i<rows; i++)			      |	        row_index = 0;
							      >	        for(int i=0;i<rows;i++)
            for(int j=0; j<cols; j++)			      |	            col_index = 0;
							      >	            for(int j=0;j<cols-6;j=j+8)
                int curr_pixel = (bgr_planes[k].at<uchar>(i,j |
                int bin_value = curr_pixel >> 4; // base 2 lo |	                uint16x8_t curr_pixel={(bgr_planes[k].at<ucha
                weight.at<float>(i,j) *= static_cast<float>(( |	                  (bgr_planes[k].at<uchar>(row_index,col_inde
                // weight.at<float>(i,j) *= static_cast<float |
                // if (count == 1)			      |
                //     std::cout << "w: " << weight.at<float> |	                uint16x8_t bin_value=vshrq_n_u16(curr_pixel,4
                //               << ", mod: " << target_model |
                //               << ", cand: " << target_cand |
                //               << std::endl;		      |	                float32x4_t target_m={target_model.at<float>(
							      >
							      >
							      >	                float32x4_t target_m1={target_model.at<float>
							      >
							      >
							      >	                float32x4_t target_c={target_candidate.at<flo
							      >
							      >
							      >	                float32x4_t target_c1={target_candidate.at<fl
							      >
							      >
							      >
							      >	                float32x4_t milan=vmulq_f32(target_m,vrecpeq_
							      >	                float32x4_t milan1=vmulq_f32(target_m1,vrecpe
							      >
							      >
							      >
							      >	              float32x4_t weight1={weight.at<float>(i,j),weig
							      >	               float32x4_t weight2={weight.at<float>(i,j+4),w
							      >
							      >	                float32x4_t weight4=vmulq_f32(weight1,milan);
							      >	                float32x4_t weight5=vmulq_f32(weight2,milan1)
							      >
							      >
							      >
							      >
							      >	                weight.at<float>(i,j)   = vgetq_lane_f32(weig
							      >	                weight.at<float>(i,j+1) = vgetq_lane_f32(weig
							      >	                weight.at<float>(i,j+2) = vgetq_lane_f32(weig
							      >	                weight.at<float>(i,j+3) = vgetq_lane_f32(weig
							      >	                weight.at<float>(i,j+4) = vgetq_lane_f32(weig
							      >	                weight.at<float>(i,j+5) = vgetq_lane_f32(weig
							      >	                weight.at<float>(i,j+6) = vgetq_lane_f32(weig
							      >	                weight.at<float>(i,j+7) = vgetq_lane_f32(weig
							      >
							      >
							      >
							      >
							      >	                col_index+=8;
							      >	            row_index++;
#ifdef TIMING						      |
							      >	    //std::cout << "w_loop: " << (ticksEnd - ticksStart) << "
#endif							      <
							      <
							      <
#ifdef TIMING						      <
#endif							      |	    //std::cout << "sqrt: " << (ticksEnd - ticksStart) << ", 
cv::Rect MeanShift::track(const cv::Mat &next_frame, const cv |	cv::Rect MeanShift::track(const cv::Mat &next_frame)
    cv::Mat curr_window;				      <
							      <
#ifdef TIMING						      <
    ticksStart = cv::getTickCount();			      |	    cv::Mat window;
#endif							      <
							      >	    ticksStart = cv::getTickCount();
							      <
#ifdef TIMING						      <
#endif							      |	    //std::cout << "pdf: " << (ticksEnd - ticksStart) << std:
							      <
    static int count = 0;				      <
    if (!count)						      <
        pool_notify_Execute(0);				      <
    count++;						      <
    float centre = static_cast<float>((mult.rows-1)/2);	      <
    float icentre = static_cast<float>(2.0/(mult.rows-1));    <
							      <
        curr_window = cv::Mat(next_frame, 		      |	        // ticksStart = cv::getTickCount();
                              cv::Range(target_Region.y, targ |	        // MOVE THE FOLLOWING LINE OUTSIDE THE LOOP
                              cv::Range(target_Region.x, targ |	        // cv::Mat target_candidate = pdf_representation(next
                              );			      |	        // **************************************************
#ifdef TIMING						      |	        // ticksEnd = cv::getTickCount();
        ticksStart = cv::getTickCount();		      |	        // std::cout << "pdf: " << (ticksEnd - ticksStart) <<
#endif							      <
        cv::Mat weight = CalWeight(curr_window, target_model, |	        window = cv::Mat(next_frame, cv::Range(target_Region.
#ifdef TIMING						      |	        ticksStart = cv::getTickCount();
							      >	        cv::Mat weight = CalWeight(window,target_model,target
#endif							      |	        //std::cout << "CalWeight: " << (ticksEnd - ticksStar
							      >	        float centre = static_cast<float>((weight.rows-1)/2.0
							      >	        double mult = 0.0;
#ifdef TIMING						      <
#endif							      <
        float norm_i = -1;				      <
            float norm_j = -1;				      |	            for(int j=0; j<weight.cols; j++)
            for(int j=0; j<weight.rows; j++)		      <
                if (mult.at<int>(i,j)) {		      |	                // MOVE THE FOLLOWING LINE ONE LEVEL ABOVE
                    delta_x += static_cast<float>(norm_j*weig |	                float norm_i = static_cast<float>(i-centre)/c
                    delta_y += static_cast<float>(norm_i*weig |	                // ******************************************
                    sum_wij += static_cast<float>(weight.at<f |
                }					      |	                float norm_j = static_cast<float>(j-centre)/c
                norm_j += icentre;			      |	                mult = pow(norm_i,2)+pow(norm_j,2)>1.0?0.0:1.
							      >	                delta_x += static_cast<float>(norm_j*weight.a
							      >	                delta_y += static_cast<float>(norm_i*weight.a
							      >	                sum_wij += static_cast<float>(weight.at<float
							      >
							      >	                // REPLACE THE ABOVE BLOCK WITH THE FOLLOWING
							      >	                // if (pow(norm_i,2)+pow(norm_j,2) <= 1.0) {
							      >	                //     delta_x += static_cast<float>(norm_j*w
							      >	                //     delta_y += static_cast<float>(norm_i*w
							      >	                //     sum_wij += static_cast<float>(weight.a
							      >	                // }
            norm_i += icentre;				      <
#ifdef TIMING						      <
#endif							      |	      //  std::cout << "loop: " << (ticksEnd - ticksStart) <<
        next_rect.x += static_cast<int>((delta_x/sum_wij)*cen |	        ticksStart = cv::getTickCount();
        next_rect.y += static_cast<int>((delta_y/sum_wij)*cen |
							      >	        next_rect.x += static_cast<float>((delta_x/sum_wij)*c
							      >	        next_rect.y += static_cast<float>((delta_y/sum_wij)*c
							      >	        {
							      >	            ticksEnd = cv::getTickCount();
							      >	            //std::cout << "rest: " << (ticksEnd - ticksStart
							      >	        }
							      >	            ticksEnd = cv::getTickCount();
							      >	            //std::cout << "rest: " << (ticksEnd - ticksStart
    count++;						      <
